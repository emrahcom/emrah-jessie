# -----------------------------------------------------------------------------
# DEFAULT SERVER
# -----------------------------------------------------------------------------
server {

listen 80 default_server;
listen [::]:80 default_server;

listen 443 ssl default_server;
listen [::]:443 ssl default_server;
include snippets/snakeoil.conf;

server_name _;
root /var/www/html;
index index.html index.htm;

# -----------------------------------------------------------------------------
# lua-resty-waf
# -----------------------------------------------------------------------------
access_by_lua '
	local lua_resty_waf = require "waf"
	local waf = lua_resty_waf:new()

	waf:set_option("mode", "ACTIVE")
	-- waf:set_option("mode", "INACTIVE")
	-- waf:set_option("mode", "SIMULATE")
	-- waf:set_option("disable_pcre_optimization", true)
	waf:set_option("score_threshold", 5)
	-- waf:set_option("ignore_rule", 90002)

	waf:set_option("event_log_target", "file")
	waf:set_option("event_log_target_path", "/var/log/nginx/waf.log")
	waf:set_option("event_log_buffer_size", 8192)
	waf:set_option("event_log_verbosity", 3)
	waf:set_option("event_log_periodic_flush", 60)
	waf:set_option("event_log_ngx_vars", "host")

	waf:exec()
';
header_filter_by_lua '
	local lua_resty_waf = require "waf"
	local waf = lua_resty_waf:new()
	waf:exec()
';
body_filter_by_lua '
	local lua_resty_waf = require "waf"
	local waf = lua_resty_waf:new()
	waf:exec()
';
log_by_lua '
	local lua_resty_waf = require "waf"
	local waf = lua_resty_waf:new()
	waf:write_log_events()
';

# -----------------------------------------------------------------------------
# backend
# -----------------------------------------------------------------------------
location / {
	# update /etc/nginx/conf.d/upstream.conf to set your backend server
	proxy_pass http://backend;
}

} # server_end
